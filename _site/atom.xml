<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://mwburke.github.io/atom.xml" rel="self" type="application/atom+xml" /><link href="https://mwburke.github.io/" rel="alternate" type="text/html" /><updated>2023-09-29T16:03:14-07:00</updated><id>https://mwburke.github.io/atom.xml</id><title type="html">Matthew Burke’s Blog</title><subtitle>Data science, generative art and other stuff</subtitle><author><name>Matthew Burke</name><email>matthew.wesley.burke@gmail.com</email></author><entry><title type="html">Distribution Drift Tolerance</title><link href="https://mwburke.github.io/data%20science/2023/09/28/distribution-drift-tolerance.html" rel="alternate" type="text/html" title="Distribution Drift Tolerance" /><published>2023-09-28T00:00:00-07:00</published><updated>2023-09-28T00:00:00-07:00</updated><id>https://mwburke.github.io/data%20science/2023/09/28/distribution-drift-tolerance</id><content type="html" xml:base="https://mwburke.github.io/data%20science/2023/09/28/distribution-drift-tolerance.html">&lt;h2 id=&quot;does-psi-have-reliable-thresholds&quot;&gt;Does PSI Have Reliable Thresholds?&lt;/h2&gt;

&lt;p&gt;I’ve written before about the use of &lt;a href=&quot;/data%20science/2018/04/29/population-stability-index.html&quot;&gt;PSI (population stability index)&lt;/a&gt; to measure population drift and provided some guidelines on interpretation of scores taken from &lt;a href=&quot;https://www.lexjansen.com/wuss/2017/47_Final_Paper_PDF.pdf&quot;&gt;this resource&lt;/a&gt;. I recently began a project involving model monitoring and began to question how the authors of that paper derived their thresholds to define slight, minor and significant changes, and have so far received no answers. This seems like a huge gap for an entire industry that has science in the name to be following a standard that has no formal basis.&lt;/p&gt;

&lt;p&gt;To remedy this, I have created a &lt;a href=&quot;https://github.com/mwburke/drift-tolerance/blob/main/drift_tolerance.ipynb&quot;&gt;jupyter notebook&lt;/a&gt; that allows the user to run through concrete examples of comparing distributions, evaluating them for drift, and creating a decision boundary representing the summary of their preferences.&lt;/p&gt;

&lt;h2 id=&quot;data-generation&quot;&gt;Data Generation&lt;/h2&gt;

&lt;p&gt;In order to provide distributions to compare, I chose to use a skewed normal as a familiar but not quite standard distribution DS/ML practitioners may encounter in their jobs. I first generate random parameters for skew, center and scale of the distribution for the base distribution, and then modify each of those parameters by random value ±25% from the original. This gives a base and alternate distribution that we are treating as the original population, and one later in time.&lt;/p&gt;

&lt;p&gt;We then sample each distribution a number of times to create our final histograms that will be reviewed by the user. For each set of samples, we can calculate the true PSI value and store it until the user has time to evaluate.&lt;/p&gt;

&lt;h2 id=&quot;evaluation-loop&quot;&gt;Evaluation Loop&lt;/h2&gt;

&lt;p&gt;When using the notebook, a single cell will show the plotted distributions against one another, but the true PSI value is not shown.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/drift_distributions.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The user must then click on one of two buttons to label the two populations as having acceptable or unacceptable drift. After clicking, their evaluation and corresponding PSI value are logged to a list, and the process repeats by replacing the plot with two new distributions and their hidden PSI value.&lt;/p&gt;

&lt;p&gt;The user can continue this process as many times as they like until they feel satisfied that they have provided enough sample data to work with.&lt;/p&gt;

&lt;h2 id=&quot;preference-estimation&quot;&gt;Preference Estimation&lt;/h2&gt;

&lt;p&gt;What we have done here is created a labeled dataset that encodes the user’s intuition on how much difference in two distributions constitutes an unacceptable risk in terms of population drift. We then can learn a logistic regression model to quantitatively measure that relationship. I chose to use PyMC to build the model because of the small data sizes and noisiness in measurements (more below), but you could use anything. Once this model has been learned, we can plot our observations alongside the curve from our learned beta parameter to compare our expectations of how we feel about risk to the measured reality. You can take a look at my results in the following chart:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/drift_logistic.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see, this doesn’t look like your usual S curve. If we zoomed out significantly, we would see the shape, but as is, due to overlap between our labels, our model doesn’t have the nice, clear-cut decision boundary we were hoping for.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Drift is subjective from person to person, and maybe even more so within an individual. Humans are bad at probability and most visual mathematical intuition that exceeds a few data points.&lt;/li&gt;
  &lt;li&gt;Reliance on industry benchmarks without appropriate supporting data can leave you and your organization vulnerable to hidden mistakes and overconfidence.&lt;/li&gt;
  &lt;li&gt;Folks working in the data industry need to challenge assumptions and if datasets do not exist, seek them out or curate them yourself.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I can imagine that going through this exercise with key members of your model validation/risk management leadership may prove insightful, and if you want to get even fancier, it might be fun to build a hierarchical logistic model to capture the risk preference of the organization overall as well as being able to compare individuals’ preferences.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mwburke/drift-tolerance&quot;&gt;Drift Tolerance Repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Matthew</name></author><category term="Data Science" /><category term="python" /><category term="ml" /><category term="metrics" /><summary type="html">Identifying your personal preference for measuring population drift</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mwburke.github.io/images/placeholder.png" /><media:content medium="image" url="https://mwburke.github.io/images/placeholder.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PyMC Wrapper</title><link href="https://mwburke.github.io/data%20science/2023/02/23/pymc-wrapper.html" rel="alternate" type="text/html" title="PyMC Wrapper" /><published>2023-02-23T00:00:00-08:00</published><updated>2023-02-23T00:00:00-08:00</updated><id>https://mwburke.github.io/data%20science/2023/02/23/pymc-wrapper</id><content type="html" xml:base="https://mwburke.github.io/data%20science/2023/02/23/pymc-wrapper.html">&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Bayesian modeling can be super valuable for capturing uncertainty and leveraging the use of prior distributions for new products/geos/etc. I’m relatively new to the space, but in my role of machine learning engineer, I found the tools to be very focused on the science and less so on deployment. While the science part is absolutely critical and must be handled thoughtfully and methodologically, there are different sets of concerns when managing a suite of models in production.&lt;/p&gt;

&lt;p&gt;I build a quick POC python library called &lt;a href=&quot;https://github.com/mwburke/pymc-wrapper&quot;&gt;pymc-wrapper&lt;/a&gt; to align PyMC’s amazing Bayesian modeling capabilities with the ease of use of scikit-learn’s fit/predict paradigm. There certainly is more work to do to build out a robust system, but I think for simpler modeling projects that require loading, saving and prediction across a number of models, this package could simplify workflows.&lt;/p&gt;

&lt;h3 id=&quot;assumptions&quot;&gt;Assumptions&lt;/h3&gt;

&lt;p&gt;Because the goal wasn’t to capture all cases and mostly to prove out the idea, I incorporated several assumptions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;There is a single function that relates all independent variables to our dependent variable&lt;/li&gt;
  &lt;li&gt;The errors are normally distributed&lt;/li&gt;
  &lt;li&gt;The model is non-hierarchical&lt;/li&gt;
  &lt;li&gt;All data preprocessing is handled beforehand&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;configuration-driven&quot;&gt;Configuration Driven&lt;/h2&gt;

&lt;p&gt;The main idea behind the package is to define your independent variables and PyMC distributions beforehand in a config file and leave the model generation and sampling hidden within the other functions. The configuration would be defined as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;independent_vars&lt;/code&gt;: a list of the names of each independent variable&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sample_params&lt;/code&gt;: a dictionary of parameters to be passed into the pm.sample function&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;variable_params&lt;/code&gt;: a dictionary of PyMC variables to be used in the model
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;variable_dict&lt;/code&gt;: a dictionary defining a specific variable definition with
                  its name as the variable_params key
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dist&lt;/code&gt;: str of the name of the PyMC distribution (case sensitive) to be used for the variable&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;params&lt;/code&gt;: a dictionary of the parameters for the variable and the values to be used as
          the model’s priors&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;function_params&lt;/code&gt;: a dictionary of function parameters
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;function&lt;/code&gt;: a python function defining the relationship of independent variables
              to the dependent variable&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;example-configuration&quot;&gt;Example Configuration&lt;/h3&gt;

&lt;p&gt;Here is an example config file stored in YAML that could be used to generate a model that attempts to learn product adoption rates according to the negative exponential function.&lt;/p&gt;

&lt;p&gt;The independent variable would be the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;week&lt;/code&gt;, and we take both an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;intercept&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lambda_val&lt;/code&gt; (chosen to not clash with the reserved &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lambda&lt;/code&gt; keyword in python) parameters to generate our final outcome.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;negative_exponential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;week&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lambda_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intercept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intercept&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intercept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lambda_val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;week&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The configuration reflects this by naming our independent variable and defining our parameters with corresponding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pymc.distribution&lt;/code&gt; function names and prior values. We can also set our sampling parameters as well.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;independent_vars&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;week&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;variable_params&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;lambda_val&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;sigma&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;dist&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;HalfNormal&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;intercept&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;mu&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;sigma&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;dist&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Normal&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;sample_params&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;draws&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To simplify things, I kept the function definition out of the config and manually set it afterwards with&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'function_params'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'function'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;negative_exponential&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;model-usage&quot;&gt;Model Usage&lt;/h2&gt;

&lt;h3 id=&quot;creation-and-training&quot;&gt;Creation and Training&lt;/h3&gt;

&lt;p&gt;Once we define and load our configuration from a file into a dictionary, creating a model wrapper object and training is as easy as the following:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PymcModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;independent_vars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependent_var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;prediction&quot;&gt;Prediction&lt;/h3&gt;

&lt;p&gt;Prediction is easy as well, and similar to above, all we have to do is prepare our test data and pass it to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;predict&lt;/code&gt; function as we would for many other model libraries. Below is an example of training on a set of curves and predicting on the same timeline to ensure that we have learned the relationship correctly:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/pymc_wrapper_learned_comparison.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Because (IMO) the point of using Bayesian models is to take advantage of their ability to capture uncertainty, I augmented the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;predict&lt;/code&gt; function to take in an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alpha&lt;/code&gt; parameter, which is used to generate credible intervals for predictions as well, and they are output along the median predictions in the output. Below is an example using an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alpha&lt;/code&gt; of 0.9 with the same dataset as before:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/pymc_wrapper_credible_interval.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s as easy as that!&lt;/p&gt;

&lt;h3 id=&quot;savingloading&quot;&gt;Saving/Loading&lt;/h3&gt;

&lt;p&gt;Like other ML libraries, we often want to save our model for prediction at another time, and I have implemented &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;save_trace&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;load_trace&lt;/code&gt; functions accordingly to facilitate this. As long as we reference the same config file for model creation, we can load a saved trace and get straight to prediction.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;trace_file_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'trace.pkl'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save_trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trace_file_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;new_model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PymcModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;new_model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trace_file_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;new_model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;creating-config-with-posteriors-as-priors&quot;&gt;Creating Config with Posteriors as Priors&lt;/h3&gt;

&lt;p&gt;One potential use case I’ve found interesting is to learn from a established product/geo and apply the posteriors as priors to a new area. Rather than manually updating configs, I added an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;export_trained_config&lt;/code&gt; function that updates the priors in the original config with posterior means and saves it to an output file. Similar to above, we could consume this updated config file to create a new model object.&lt;/p&gt;

&lt;h3 id=&quot;periodic-retraining&quot;&gt;Periodic Retraining&lt;/h3&gt;

&lt;p&gt;One last use case I thought might be interesting to showcase is the ability to call the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fit&lt;/code&gt; function on multiple sets of data. In the following example, I fitted a model to the adoption rate curves we saw above, exported the trained config file, created a new model with it as priors, and finally did a series of repeated fitting on data in chunks of 4 weeks to see how the predicted curve developed over time. The performance at the beginning isn’t great, as it overpredicts the curve steepness at first, but with the noise early on, it’s not totally unreasonable. Either way, it definitely gets more confident over time as it gains more observed data and stabilizes after a few months of data.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/pymc_wrapper_monthly_update.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;feedback&quot;&gt;Feedback&lt;/h2&gt;

&lt;p&gt;While this is definitely a work in progress, I would love for you to check out &lt;a href=&quot;https://github.com/mwburke/pymc-wrapper/tree/main&quot;&gt;the repo&lt;/a&gt; and the &lt;a href=&quot;https://github.com/mwburke/pymc-wrapper/blob/main/example/example_walkthrough.ipynb&quot;&gt;example walkthrough notebook&lt;/a&gt; that I used to generate these plots and examples.&lt;/p&gt;

&lt;p&gt;If you have any feedback of things you would change, would add or even any thoughts of it something like this is needed at all, I would love to hear from you at &lt;a href=&quot;mailto:matthew.wesley.burke@gmail.com&quot;&gt;my email&lt;/a&gt; or github in issues/PRs!&lt;/p&gt;</content><author><name>Matthew Burke</name><email>matthew.wesley.burke@gmail.com</email></author><category term="Data Science" /><category term="ml" /><category term="python" /><category term="bayesian" /><summary type="html">Making PyMC models more accessible and reusable</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mwburke.github.io/images/pymc_wrapper_preview.png" /><media:content medium="image" url="https://mwburke.github.io/images/pymc_wrapper_preview.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">MMM: Miracle of Marketing Measurement or Misleading Modeling Methodology?</title><link href="https://mwburke.github.io/data%20science/2023/01/31/mmm-future-or-liability.html" rel="alternate" type="text/html" title="MMM: Miracle of Marketing Measurement or Misleading  Modeling Methodology?" /><published>2023-01-31T00:00:00-08:00</published><updated>2023-01-31T00:00:00-08:00</updated><id>https://mwburke.github.io/data%20science/2023/01/31/mmm-future-or-liability</id><content type="html" xml:base="https://mwburke.github.io/data%20science/2023/01/31/mmm-future-or-liability.html">&lt;h1 id=&quot;mmm-miracle-of-marketing-measurement-or-misleading--modeling-methodology&quot;&gt;MMM: Miracle of Marketing Measurement or Misleading  Modeling Methodology?&lt;/h1&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;MMMs are a future-proofed tool for measuring marketing effectiveness in a world of increased online privacy, but can be prone to multiple silent failure methods that provide inaccurate results.&lt;/p&gt;

&lt;h2 id=&quot;what-is-an-mmm&quot;&gt;What is an MMM?&lt;/h2&gt;

&lt;p&gt;Media mix modeling is a statistical technique used to understand the effectiveness of different advertising and marketing channels, such as television, print, digital, and so on. The goal of media mix modeling is to determine the optimal allocation of a company’s advertising budget across different channels to maximize the return on investment (ROI). This is done by analyzing historical data marketing expenditures and conversions, and using statistical models to estimate the incremental  impact of different advertising channels on conversions.&lt;/p&gt;

&lt;p&gt;Businesses use media mix modeling to gain insights into the effectiveness of their advertising campaigns and to make data-driven decisions about where to allocate their advertising budget. By understanding the ROI of different advertising channels, companies can optimize their marketing strategy to maximize their sales and revenue. Additionally, media mix modeling can also help businesses identify underperforming channels and make adjustments to their advertising strategy accordingly. It also can help them to understand the changes of the market and the effectiveness of their strategy.&lt;/p&gt;

&lt;h2 id=&quot;privacy-proof&quot;&gt;Privacy Proof?&lt;/h2&gt;

&lt;p&gt;If you haven’t noticed the incessant cookie tracking messages on every website, the world is heading on a trend of increased data privacy online due to legislation such &lt;a href=&quot;https://gdpr-info.eu/&quot;&gt;GDPR&lt;/a&gt; or  &lt;a href=&quot;https://oag.ca.gov/privacy/ccpa&quot;&gt;CCPA&lt;/a&gt;, and Apple’s &lt;a href=&quot;https://developer.apple.com/app-store/user-privacy-and-data-use/&quot;&gt;iOS 14&lt;/a&gt; privacy changes. What this means for advertisers is that they will receive less and less user impression level data. While your company may still be able to extract aggregate-level insights from &lt;a href=&quot;https://www.appsflyer.com/resources/guides/data-clean-rooms/&quot;&gt;data clean rooms&lt;/a&gt;, mapping conversions to specific users will no longer be possible. The most obvious impact is removing the possibility of maintaining a &lt;a href=&quot;https://segment.com/academy/advanced-analytics/an-introduction-to-multi-touch-attribution/&quot;&gt;multi-touch attribution&lt;/a&gt; pipeline to assign credit to user impression for conversions.&lt;/p&gt;

&lt;h3 id=&quot;evergreen-data&quot;&gt;Evergreen Data&lt;/h3&gt;

&lt;p&gt;MMMs, however, don’t rely on user-level data, and instead rely on first party data that companies will always have: namely what money went where. Marketing teams will always have budgets to track what advertising dollars were spent on which channels and campaigns, as well as conversions tracked to report revenue. These are the core data that are fed into an MMM, and as such, I don’t see them disappearing at any point in the future. In some cases, impressions are often preferred over marketing spend as input data to the model due to reducing fluctuations in advertising CPA, but my guess is that advertisers will continue to provide at least a high level estimation of impression magnitude to keep their customers happy.&lt;/p&gt;

&lt;h2 id=&quot;the-pitfalls&quot;&gt;The Pitfalls&lt;/h2&gt;

&lt;p&gt;With our options for measurement dwindling, why be pessimistic about MMM? It seems like the one stable methodology that will see widespread use. The main reasons revolve around the fact that it’s a small data problem with a big emphasis on slow but precise data collection, and the potential for silent methodology errors.&lt;/p&gt;

&lt;h3 id=&quot;lack-of-quality-data-input&quot;&gt;Lack of Quality Data Input&lt;/h3&gt;

&lt;h4 id=&quot;not-enough-data&quot;&gt;Not Enough Data&lt;/h4&gt;

&lt;p&gt;Data collection can’t be rushed or automated with label training, but is collected naturally over time as your company markets its products or services. For some digital channels/advertisers, you may be able to collect both spend and impressions data down to a daily basis, whereas for traditional non-digital channels such as mail or print, you may be limited to a monthly cadence.&lt;/p&gt;

&lt;p&gt;Given that your data inputs must be fed into the model at the least granular level, your company may take years to gain enough data to reliably estimate performance. Assume for example that you want to estimate the carryover and saturation effects at a channel level, and depending on the fit forms you use to model them, this could be from 2-5 parameters for each channel. If you have 10+ channels, you can see how this will take a length amount of time until you even have more data points than parameters, let alone to reduce uncertainty to a reasonable amount.&lt;/p&gt;

&lt;p&gt;New channels equally struggle with this problem of small data and extracting seasonal effects. Often, one solution for this is to perform additional testing and apply the derived assumptions rather than inferring parameters.&lt;/p&gt;

&lt;h4 id=&quot;not-enough-data-variance&quot;&gt;Not Enough Data Variance&lt;/h4&gt;

&lt;p&gt;One rookie mistake new marketing divisions may make is to spend proportionally on channels month over month. Although the total spend in a time period may shift, if you spend the same proportions in each channel over time, you end up not having enough variance between channels and end up with an entirely collinear dataset. Any model building after that will run into serious, unresolvable modeling issues. This is just a classic example of the explore/exploit paradigm where you need to add enough randomness to discern between channels while still maximizing profit. Fortunately, there may be natural barriers through ad planning and payment that prevent this issue entirely, but it’s something to monitor from a central planning team.&lt;/p&gt;

&lt;h4 id=&quot;missing-covariates&quot;&gt;Missing Covariates&lt;/h4&gt;

&lt;p&gt;Marketing spend only accounts for a portion of all conversions with the remaining conversions being attributed to a number of control factors. These could include natural, brand recognition, economic factors, total available market, competitor advertising/brand effects, etc. Without knowledge beforehand whether they correlate with your target, it can be difficult to decide whether or not to invest in data collection or purchase. Sometimes known factors may be unavailable due to timing granularity or proprietary access. From my point of view, this is the primary reason using a third party vendor to build an MMM is valuable, because their expertise and data collection infrastructure may overcome some of these limitations and augment your data with crucial factors.&lt;/p&gt;

&lt;h3 id=&quot;misinterpretation-and-misspecification&quot;&gt;Misinterpretation and Misspecification&lt;/h3&gt;

&lt;p&gt;MMMs have been around for a long time, and the amount of domain expertise developed has led to a few common solutions being preferred. The technical implementation of those has become almost trivial, and, in my opinion, the design of your model is entirely based around the set of assumptions you apply. This is advantageous if you fully understand the problem space, but without appropriate experience or data access, a lot of these assumptions will have to be made in an ad hoc manner or on gut feel.&lt;/p&gt;

&lt;h4 id=&quot;domain-assumptions&quot;&gt;Domain Assumptions&lt;/h4&gt;

&lt;p&gt;Before delving into the modeling process, you have to specify a number of domain specific assumptions including whether or not channel advertising effects are additive or multiplicative and what functional forms saturation curve and carryover lag effects should take. It would take extensive  time and resources to actually test and validate all of these assumptions, and, unless you’re a large marketing firm that is providing MMM as a service, it’s unlikely you will ever be able to validate your assumption choices. In this case, you are accepting a risk of building a model that doesn’t correspond to reality and will always be wrong in an unmeasurable amount, but from what I’ve seen when reading guides and resources online, this risk isn’t highlighted nearly enough.&lt;/p&gt;

&lt;h4 id=&quot;forecasting-assumptions&quot;&gt;Forecasting Assumptions&lt;/h4&gt;

&lt;p&gt;Well-specified MMMs take into account non-media control variables to isolate incremental conversions from marketing spend from all other effects. In my experience, planning based on MMM results takes into account only the incremental marketing ROI measurements and fails to consider all of the control variables used as well. However, just as in life, no decision is still a decision, and not taking any changes into account is close to extrapolating the current situation forwards. I’m not necessarily saying that trying to predict future economic conditions given the volatility of Covid, inflation, recession (?), and interest rates is advisable or even possible, but focusing entirely on media effects is just another way to have silent, unmeasurable errors.&lt;/p&gt;

&lt;h4 id=&quot;understanding-time-period-application&quot;&gt;Understanding Time Period Application&lt;/h4&gt;

&lt;p&gt;Most MMMs until now have tended to use all historical time periods in the modeling process, and to update it, data  since the last run is collected and appended to the full dataset. The outputs are analyzed and used to optimize marketing spend for an upcoming period, commonly a few months out. The fact that we are only learning a set of parameters for each channel over the whole time is highly concerning to me, given how we know that businesses shift their strategies, advertising effectiveness and scale (hopefully) over time. Yes, if the curve was static, we would be gaining more data points on curve and decreasing our uncertainty in our estimate, but assuming that all channels’ parameters have remained constant over months or years seems unreasonable to me.&lt;/p&gt;

&lt;p&gt;There seem to be two main methods of combatting this issue. The first is &lt;a href=&quot;https://stats.stackexchange.com/questions/454415/how-to-account-for-the-recency-of-the-observations-in-a-regression-problem&quot;&gt;recency weighting&lt;/a&gt;, which is a method of giving larger importance to later observations in inferring channel parameters, and while it is still able to leverage learnings from earlier time periods, it better represents recent trends to help align with planning. The other &lt;a href=&quot;https://arxiv.org/pdf/2106.03322.pdf&quot;&gt;time varying coefficients&lt;/a&gt; which captures the parameter at different points in time, and seems to me to be powerful enough to become standard practice for MMM.&lt;/p&gt;

&lt;h2 id=&quot;conclusion-aka-my-bad-opinions&quot;&gt;Conclusion (aka My Bad Opinions)&lt;/h2&gt;

&lt;p&gt;MMM still can enormously useful but requires thoughtful planning and review from domain experts and data scientists before digging into the actual modeling portion. If you can’t provide that level of support for data and assumptions validation, it may make more sense for you to purse a third-party marketing firm to leverage their skills instead.&lt;/p&gt;

&lt;p&gt;The good news is that big tech seems to be realizing the adpocalypse is continuing and are beginning to invest in MMM tools. Here are some that I think are valuable:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/google/lightweight_mmm&quot;&gt;Google’s Lightweight MMM&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;This is a pretty feature complete python package for building Bayesian MMMs&lt;/li&gt;
      &lt;li&gt;It has convenient features such as geo-level modeling, preprocessing and budget optimization&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://facebookexperimental.github.io/Robyn/&quot;&gt;Facebook’s Robyn&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Very powerful and feature rich MMM building tool in R.&lt;/li&gt;
      &lt;li&gt;In my opinion, this seems like the best option for developing your own MMM if you have resources to dive deep into it and aren’t full committed to only python&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/uber/orbit&quot;&gt;Uber’s Orbit&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;This is a python library that implements the bayesian time-varying coefficients for time series forecasting&lt;/li&gt;
      &lt;li&gt;If you want less functionality and are prioritizing time varying coefficients, this is the library for you&lt;/li&gt;
      &lt;li&gt;Not a MMM-specific library so you are missing a lot of the preprocessing and diagnostic tools found in Robyn, but if you are willing to implement those yourself (they aren’t rocket science), then this is a great option&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I mostly put this together to capture areas of discussion around MMM that I felt weren’t being addressed properly, and if you have any tips on addressing these problems, please feel free to share them here or elsewhere on the internet. I’m sure lots of folks are working on the same types of problems and increasing literature around the practical development of MMMs would help the industry a ton.&lt;/p&gt;</content><author><name>Matthew Burke</name><email>matthew.wesley.burke@gmail.com</email></author><category term="Data Science" /><category term="ml" /><category term="marketing" /><summary type="html">MMMs are a future-proofed tool for measuring marketing effectiveness in a world of increased online privacy, but can be prone to multiple silent failure methods that provide inaccurate results.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mwburke.github.io/images/mmm_0.png" /><media:content medium="image" url="https://mwburke.github.io/images/mmm_0.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Spaghetti Code</title><link href="https://mwburke.github.io/generative%20art/2022/02/23/making-spaghetti-code.html" rel="alternate" type="text/html" title="Spaghetti Code" /><published>2022-02-23T00:00:00-08:00</published><updated>2022-02-23T00:00:00-08:00</updated><id>https://mwburke.github.io/generative%20art/2022/02/23/making-spaghetti-code</id><content type="html" xml:base="https://mwburke.github.io/generative%20art/2022/02/23/making-spaghetti-code.html">&lt;p&gt;As I mentioned in an &lt;a href=&quot;/generative%20art/2019/06/18/basic-tiling.html&quot;&gt;earlier post&lt;/a&gt; about tiling patterns, I really like truchet tilings. Each border of the tiles that traditionally have patterns that connect the midpoints of adjacent sides. I explored this concept a long time ago, but instead of using a traditional square grid, I used a hexagonal one instead.&lt;/p&gt;

&lt;blockquote class=&quot;instagram-media&quot; data-instgrm-permalink=&quot;https://www.instagram.com/p/CAHOcTvAwKK/?utm_source=ig_embed&amp;amp;utm_campaign=loading&quot; data-instgrm-version=&quot;14&quot; style=&quot; background:#FFF; border:0; border-radius:3px; box-shadow:0 0 1px 0 rgba(0,0,0,0.5),0 1px 10px 0 rgba(0,0,0,0.15); margin: 1px; max-width:540px; min-width:326px; padding:0; width:99.375%; width:-webkit-calc(100% - 2px); width:calc(100% - 2px);&quot;&gt;&lt;div style=&quot;padding:16px;&quot;&gt; &lt;a href=&quot;https://www.instagram.com/p/CAHOcTvAwKK/?utm_source=ig_embed&amp;amp;utm_campaign=loading&quot; style=&quot; background:#FFFFFF; line-height:0; padding:0 0; text-align:center; text-decoration:none; width:100%;&quot; target=&quot;_blank&quot;&gt; &lt;div style=&quot; display: flex; flex-direction: row; align-items: center;&quot;&gt; &lt;div style=&quot;background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 40px; margin-right: 14px; width: 40px;&quot;&gt;&lt;/div&gt; &lt;div style=&quot;display: flex; flex-direction: column; flex-grow: 1; justify-content: center;&quot;&gt; &lt;div style=&quot; background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 100px;&quot;&gt;&lt;/div&gt; &lt;div style=&quot; background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 60px;&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;padding: 19% 0;&quot;&gt;&lt;/div&gt; &lt;div style=&quot;display:block; height:50px; margin:0 auto 12px; width:50px;&quot;&gt;&lt;svg width=&quot;50px&quot; height=&quot;50px&quot; viewBox=&quot;0 0 60 60&quot; version=&quot;1.1&quot; xmlns=&quot;https://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;https://www.w3.org/1999/xlink&quot;&gt;&lt;g stroke=&quot;none&quot; stroke-width=&quot;1&quot; fill=&quot;none&quot; fill-rule=&quot;evenodd&quot;&gt;&lt;g transform=&quot;translate(-511.000000, -20.000000)&quot; fill=&quot;#000000&quot;&gt;&lt;g&gt;&lt;path d=&quot;M556.869,30.41 C554.814,30.41 553.148,32.076 553.148,34.131 C553.148,36.186 554.814,37.852 556.869,37.852 C558.924,37.852 560.59,36.186 560.59,34.131 C560.59,32.076 558.924,30.41 556.869,30.41 M541,60.657 C535.114,60.657 530.342,55.887 530.342,50 C530.342,44.114 535.114,39.342 541,39.342 C546.887,39.342 551.658,44.114 551.658,50 C551.658,55.887 546.887,60.657 541,60.657 M541,33.886 C532.1,33.886 524.886,41.1 524.886,50 C524.886,58.899 532.1,66.113 541,66.113 C549.9,66.113 557.115,58.899 557.115,50 C557.115,41.1 549.9,33.886 541,33.886 M565.378,62.101 C565.244,65.022 564.756,66.606 564.346,67.663 C563.803,69.06 563.154,70.057 562.106,71.106 C561.058,72.155 560.06,72.803 558.662,73.347 C557.607,73.757 556.021,74.244 553.102,74.378 C549.944,74.521 548.997,74.552 541,74.552 C533.003,74.552 532.056,74.521 528.898,74.378 C525.979,74.244 524.393,73.757 523.338,73.347 C521.94,72.803 520.942,72.155 519.894,71.106 C518.846,70.057 518.197,69.06 517.654,67.663 C517.244,66.606 516.755,65.022 516.623,62.101 C516.479,58.943 516.448,57.996 516.448,50 C516.448,42.003 516.479,41.056 516.623,37.899 C516.755,34.978 517.244,33.391 517.654,32.338 C518.197,30.938 518.846,29.942 519.894,28.894 C520.942,27.846 521.94,27.196 523.338,26.654 C524.393,26.244 525.979,25.756 528.898,25.623 C532.057,25.479 533.004,25.448 541,25.448 C548.997,25.448 549.943,25.479 553.102,25.623 C556.021,25.756 557.607,26.244 558.662,26.654 C560.06,27.196 561.058,27.846 562.106,28.894 C563.154,29.942 563.803,30.938 564.346,32.338 C564.756,33.391 565.244,34.978 565.378,37.899 C565.522,41.056 565.552,42.003 565.552,50 C565.552,57.996 565.522,58.943 565.378,62.101 M570.82,37.631 C570.674,34.438 570.167,32.258 569.425,30.349 C568.659,28.377 567.633,26.702 565.965,25.035 C564.297,23.368 562.623,22.342 560.652,21.575 C558.743,20.834 556.562,20.326 553.369,20.18 C550.169,20.033 549.148,20 541,20 C532.853,20 531.831,20.033 528.631,20.18 C525.438,20.326 523.257,20.834 521.349,21.575 C519.376,22.342 517.703,23.368 516.035,25.035 C514.368,26.702 513.342,28.377 512.574,30.349 C511.834,32.258 511.326,34.438 511.181,37.631 C511.035,40.831 511,41.851 511,50 C511,58.147 511.035,59.17 511.181,62.369 C511.326,65.562 511.834,67.743 512.574,69.651 C513.342,71.625 514.368,73.296 516.035,74.965 C517.703,76.634 519.376,77.658 521.349,78.425 C523.257,79.167 525.438,79.673 528.631,79.82 C531.831,79.965 532.853,80.001 541,80.001 C549.148,80.001 550.169,79.965 553.369,79.82 C556.562,79.673 558.743,79.167 560.652,78.425 C562.623,77.658 564.297,76.634 565.965,74.965 C567.633,73.296 568.659,71.625 569.425,69.651 C570.167,67.743 570.674,65.562 570.82,62.369 C570.966,59.17 571,58.147 571,50 C571,41.851 570.966,40.831 570.82,37.631&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div style=&quot;padding-top: 8px;&quot;&gt; &lt;div style=&quot; color:#3897f0; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:550; line-height:18px;&quot;&gt;View this post on Instagram&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;padding: 12.5% 0;&quot;&gt;&lt;/div&gt; &lt;div style=&quot;display: flex; flex-direction: row; margin-bottom: 14px; align-items: center;&quot;&gt;&lt;div&gt; &lt;div style=&quot;background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(0px) translateY(7px);&quot;&gt;&lt;/div&gt; &lt;div style=&quot;background-color: #F4F4F4; height: 12.5px; transform: rotate(-45deg) translateX(3px) translateY(1px); width: 12.5px; flex-grow: 0; margin-right: 14px; margin-left: 2px;&quot;&gt;&lt;/div&gt; &lt;div style=&quot;background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(9px) translateY(-18px);&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;margin-left: 8px;&quot;&gt; &lt;div style=&quot; background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 20px; width: 20px;&quot;&gt;&lt;/div&gt; &lt;div style=&quot; width: 0; height: 0; border-top: 2px solid transparent; border-left: 6px solid #f4f4f4; border-bottom: 2px solid transparent; transform: translateX(16px) translateY(-4px) rotate(30deg)&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;margin-left: auto;&quot;&gt; &lt;div style=&quot; width: 0px; border-top: 8px solid #F4F4F4; border-right: 8px solid transparent; transform: translateY(16px);&quot;&gt;&lt;/div&gt; &lt;div style=&quot; background-color: #F4F4F4; flex-grow: 0; height: 12px; width: 16px; transform: translateY(-4px);&quot;&gt;&lt;/div&gt; &lt;div style=&quot; width: 0; height: 0; border-top: 8px solid #F4F4F4; border-left: 8px solid transparent; transform: translateY(-4px) translateX(8px);&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; &lt;div style=&quot;display: flex; flex-direction: column; flex-grow: 1; justify-content: center; margin-bottom: 24px;&quot;&gt; &lt;div style=&quot; background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 224px;&quot;&gt;&lt;/div&gt; &lt;div style=&quot; background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 144px;&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;p style=&quot; color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; line-height:17px; margin-bottom:0; margin-top:8px; overflow:hidden; padding:8px 0 7px; text-align:center; text-overflow:ellipsis; white-space:nowrap;&quot;&gt;&lt;a href=&quot;https://www.instagram.com/p/CAHOcTvAwKK/?utm_source=ig_embed&amp;amp;utm_campaign=loading&quot; style=&quot; color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px; text-decoration:none;&quot; target=&quot;_blank&quot;&gt;A post shared by Matthew Burke (@yot_club_)&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//www.instagram.com/embed.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Each hexagon has every side connected to another side, and by repeating these connections, you end up with some emergent structures of how the paths travel over time. I like calling them noodles, so that’s what I’ll do here from now on.&lt;/p&gt;

&lt;p&gt;My original implementation was… a bit of disaster from the code perspective. I left it for a while, and when I went back to revisit it to color each of these noodles individually, I found myself confused by my own work and gave up. Later on, I still felt the urge to do improve upon my initial version and recreating it from the ground up seemed like the fastest option.&lt;/p&gt;

&lt;h1 id=&quot;new-implementation&quot;&gt;New Implementation&lt;/h1&gt;

&lt;h2 id=&quot;paths-generation&quot;&gt;Paths Generation&lt;/h2&gt;

&lt;p&gt;I built upon my initial idea of defining a grid of flat-top hexagons, and added some definitions to keep things clear. Each side of the hexagon is assigned an index integer, as well as a list of integer pairs to define which sides of the hexagon are connected. Each hexagon could contain zero to three sets of connections, with their order denoting the order in which they would be drawn to the screen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/spaghetti_3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once we generate connections for each of the hexagons, we iterate over all the hexagons and over all the connections for each hexagon. We start at the first connection, and if it has not been visited, recursively follow the path from one hexagon to the next, using the side indices we defined earlier to choose the next hexagon, until we reach an end, a visited path, or the starting point. As we traverse them, we mark each of the connections as visited, so that when we reach that connection later on, we will not pursue it. One note is that, since we don’t know whether or not we are starting at an endpoint, we traverse the path in two different directions, and just swap the connection orders for one of the directions before combining.&lt;/p&gt;

&lt;p&gt;The result for following a single path in how it maps across hexagons can be shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/spaghetti_0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We do this for all hexagons and all connections, collecting them into path objects with their hexagon locations and x/y coordinates. Once this is finished, we have all our paths and just need to cap them with semicircles of the correct end colors. Here is a final render of all paths being drawn without caps, overlaid with the hexagon grid that underlies them all.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/spaghetti_2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At this point, we have all we need and just need to assign the colors and work on generating interesting patterns.&lt;/p&gt;

&lt;h2 id=&quot;style-generation&quot;&gt;Style Generation&lt;/h2&gt;

&lt;p&gt;While there were dozens of ideas I could have explored, I get overwhelmed with too many options so I limited myself to the following areas to delve deeper into and came up with the following final list of constrainted parameters that I chose to work within.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Colors
    &lt;ul&gt;
      &lt;li&gt;Overall palette
        &lt;ul&gt;
          &lt;li&gt;What do we want to use for the background and noodle colors?&lt;/li&gt;
          &lt;li&gt;Even if a palette is good, does it have enough contrast to distinguish between foreground/background?&lt;/li&gt;
          &lt;li&gt;Does the palette have muddy colors if we have a gradient or do the in between colors look good as well?&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Noodle style
        &lt;ul&gt;
          &lt;li&gt;Color it directly or add an outline surrounding it
            &lt;ul&gt;
              &lt;li&gt;If we have an outline, do we keep a static one across all noodles or pick a different outline color for each?&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Color the noodle with a single color or make a color changing graadient
            &lt;ul&gt;
              &lt;li&gt;If we have a gradient, do we rotate through the palette in order or assign sequential colors randomly?&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Path shapes
    &lt;ul&gt;
      &lt;li&gt;Connection patterns
        &lt;ul&gt;
          &lt;li&gt;Fully random for each hexagon
            &lt;ul&gt;
              &lt;li&gt;Do we keep three sets of connections for each one or do we have a lower amount?&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Stripes along horizontal, vertical and diagonals&lt;/li&gt;
          &lt;li&gt;Chunks of MxN hexagon groups that are repeated along horizontal, vertical and diagonals with or without offsets&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Border
        &lt;ul&gt;
          &lt;li&gt;Do we feed connections back to the middle or just truncate?&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Curve polygon fidelity
        &lt;ul&gt;
          &lt;li&gt;Closer to fully round&lt;/li&gt;
          &lt;li&gt;Low poly&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ultimately, I think my favorites were gradient noodles without outlines that either had random connections or repeating chunk patterns.&lt;/p&gt;

&lt;blockquote class=&quot;instagram-media&quot; data-instgrm-permalink=&quot;https://www.instagram.com/p/CZqAMbSvnzQ/?utm_source=ig_embed&amp;amp;utm_campaign=loading&quot; data-instgrm-version=&quot;14&quot; style=&quot; background:#FFF; border:0; border-radius:3px; box-shadow:0 0 1px 0 rgba(0,0,0,0.5),0 1px 10px 0 rgba(0,0,0,0.15); margin: 1px; max-width:540px; min-width:326px; padding:0; width:99.375%; width:-webkit-calc(100% - 2px); width:calc(100% - 2px);&quot;&gt;&lt;div style=&quot;padding:16px;&quot;&gt; &lt;a href=&quot;https://www.instagram.com/p/CZqAMbSvnzQ/?utm_source=ig_embed&amp;amp;utm_campaign=loading&quot; style=&quot; background:#FFFFFF; line-height:0; padding:0 0; text-align:center; text-decoration:none; width:100%;&quot; target=&quot;_blank&quot;&gt; &lt;div style=&quot; display: flex; flex-direction: row; align-items: center;&quot;&gt; &lt;div style=&quot;background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 40px; margin-right: 14px; width: 40px;&quot;&gt;&lt;/div&gt; &lt;div style=&quot;display: flex; flex-direction: column; flex-grow: 1; justify-content: center;&quot;&gt; &lt;div style=&quot; background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 100px;&quot;&gt;&lt;/div&gt; &lt;div style=&quot; background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 60px;&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;padding: 19% 0;&quot;&gt;&lt;/div&gt; &lt;div style=&quot;display:block; height:50px; margin:0 auto 12px; width:50px;&quot;&gt;&lt;svg width=&quot;50px&quot; height=&quot;50px&quot; viewBox=&quot;0 0 60 60&quot; version=&quot;1.1&quot; xmlns=&quot;https://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;https://www.w3.org/1999/xlink&quot;&gt;&lt;g stroke=&quot;none&quot; stroke-width=&quot;1&quot; fill=&quot;none&quot; fill-rule=&quot;evenodd&quot;&gt;&lt;g transform=&quot;translate(-511.000000, -20.000000)&quot; fill=&quot;#000000&quot;&gt;&lt;g&gt;&lt;path d=&quot;M556.869,30.41 C554.814,30.41 553.148,32.076 553.148,34.131 C553.148,36.186 554.814,37.852 556.869,37.852 C558.924,37.852 560.59,36.186 560.59,34.131 C560.59,32.076 558.924,30.41 556.869,30.41 M541,60.657 C535.114,60.657 530.342,55.887 530.342,50 C530.342,44.114 535.114,39.342 541,39.342 C546.887,39.342 551.658,44.114 551.658,50 C551.658,55.887 546.887,60.657 541,60.657 M541,33.886 C532.1,33.886 524.886,41.1 524.886,50 C524.886,58.899 532.1,66.113 541,66.113 C549.9,66.113 557.115,58.899 557.115,50 C557.115,41.1 549.9,33.886 541,33.886 M565.378,62.101 C565.244,65.022 564.756,66.606 564.346,67.663 C563.803,69.06 563.154,70.057 562.106,71.106 C561.058,72.155 560.06,72.803 558.662,73.347 C557.607,73.757 556.021,74.244 553.102,74.378 C549.944,74.521 548.997,74.552 541,74.552 C533.003,74.552 532.056,74.521 528.898,74.378 C525.979,74.244 524.393,73.757 523.338,73.347 C521.94,72.803 520.942,72.155 519.894,71.106 C518.846,70.057 518.197,69.06 517.654,67.663 C517.244,66.606 516.755,65.022 516.623,62.101 C516.479,58.943 516.448,57.996 516.448,50 C516.448,42.003 516.479,41.056 516.623,37.899 C516.755,34.978 517.244,33.391 517.654,32.338 C518.197,30.938 518.846,29.942 519.894,28.894 C520.942,27.846 521.94,27.196 523.338,26.654 C524.393,26.244 525.979,25.756 528.898,25.623 C532.057,25.479 533.004,25.448 541,25.448 C548.997,25.448 549.943,25.479 553.102,25.623 C556.021,25.756 557.607,26.244 558.662,26.654 C560.06,27.196 561.058,27.846 562.106,28.894 C563.154,29.942 563.803,30.938 564.346,32.338 C564.756,33.391 565.244,34.978 565.378,37.899 C565.522,41.056 565.552,42.003 565.552,50 C565.552,57.996 565.522,58.943 565.378,62.101 M570.82,37.631 C570.674,34.438 570.167,32.258 569.425,30.349 C568.659,28.377 567.633,26.702 565.965,25.035 C564.297,23.368 562.623,22.342 560.652,21.575 C558.743,20.834 556.562,20.326 553.369,20.18 C550.169,20.033 549.148,20 541,20 C532.853,20 531.831,20.033 528.631,20.18 C525.438,20.326 523.257,20.834 521.349,21.575 C519.376,22.342 517.703,23.368 516.035,25.035 C514.368,26.702 513.342,28.377 512.574,30.349 C511.834,32.258 511.326,34.438 511.181,37.631 C511.035,40.831 511,41.851 511,50 C511,58.147 511.035,59.17 511.181,62.369 C511.326,65.562 511.834,67.743 512.574,69.651 C513.342,71.625 514.368,73.296 516.035,74.965 C517.703,76.634 519.376,77.658 521.349,78.425 C523.257,79.167 525.438,79.673 528.631,79.82 C531.831,79.965 532.853,80.001 541,80.001 C549.148,80.001 550.169,79.965 553.369,79.82 C556.562,79.673 558.743,79.167 560.652,78.425 C562.623,77.658 564.297,76.634 565.965,74.965 C567.633,73.296 568.659,71.625 569.425,69.651 C570.167,67.743 570.674,65.562 570.82,62.369 C570.966,59.17 571,58.147 571,50 C571,41.851 570.966,40.831 570.82,37.631&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div style=&quot;padding-top: 8px;&quot;&gt; &lt;div style=&quot; color:#3897f0; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:550; line-height:18px;&quot;&gt;View this post on Instagram&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;padding: 12.5% 0;&quot;&gt;&lt;/div&gt; &lt;div style=&quot;display: flex; flex-direction: row; margin-bottom: 14px; align-items: center;&quot;&gt;&lt;div&gt; &lt;div style=&quot;background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(0px) translateY(7px);&quot;&gt;&lt;/div&gt; &lt;div style=&quot;background-color: #F4F4F4; height: 12.5px; transform: rotate(-45deg) translateX(3px) translateY(1px); width: 12.5px; flex-grow: 0; margin-right: 14px; margin-left: 2px;&quot;&gt;&lt;/div&gt; &lt;div style=&quot;background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(9px) translateY(-18px);&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;margin-left: 8px;&quot;&gt; &lt;div style=&quot; background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 20px; width: 20px;&quot;&gt;&lt;/div&gt; &lt;div style=&quot; width: 0; height: 0; border-top: 2px solid transparent; border-left: 6px solid #f4f4f4; border-bottom: 2px solid transparent; transform: translateX(16px) translateY(-4px) rotate(30deg)&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;margin-left: auto;&quot;&gt; &lt;div style=&quot; width: 0px; border-top: 8px solid #F4F4F4; border-right: 8px solid transparent; transform: translateY(16px);&quot;&gt;&lt;/div&gt; &lt;div style=&quot; background-color: #F4F4F4; flex-grow: 0; height: 12px; width: 16px; transform: translateY(-4px);&quot;&gt;&lt;/div&gt; &lt;div style=&quot; width: 0; height: 0; border-top: 8px solid #F4F4F4; border-left: 8px solid transparent; transform: translateY(-4px) translateX(8px);&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; &lt;div style=&quot;display: flex; flex-direction: column; flex-grow: 1; justify-content: center; margin-bottom: 24px;&quot;&gt; &lt;div style=&quot; background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 224px;&quot;&gt;&lt;/div&gt; &lt;div style=&quot; background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 144px;&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;p style=&quot; color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; line-height:17px; margin-bottom:0; margin-top:8px; overflow:hidden; padding:8px 0 7px; text-align:center; text-overflow:ellipsis; white-space:nowrap;&quot;&gt;&lt;a href=&quot;https://www.instagram.com/p/CZqAMbSvnzQ/?utm_source=ig_embed&amp;amp;utm_campaign=loading&quot; style=&quot; color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px; text-decoration:none;&quot; target=&quot;_blank&quot;&gt;A post shared by Matthew Burke (@yot_club_)&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//www.instagram.com/embed.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://observablehq.com/@osteele/truchet-tile-generation&quot;&gt;Generalized Truchet Tiles&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.redblobgames.com/grids/hexagons/&quot;&gt;Hexagonal Grids - Red Blob Games&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Matthew Burke</name><email>matthew.wesley.burke@gmail.com</email></author><category term="Generative Art" /><category term="javascript" /><category term="p5js" /><summary type="html">Making generative noodle art</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mwburke.github.io/images/spaghetti_header.png" /><media:content medium="image" url="https://mwburke.github.io/images/spaghetti_header.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Codenames Clue Generator using Semantic Similarity</title><link href="https://mwburke.github.io/data%20science/2021/12/12/codenames-clue-generator-version-1.html" rel="alternate" type="text/html" title="Codenames Clue Generator using Semantic Similarity" /><published>2021-12-12T00:00:00-08:00</published><updated>2021-12-12T00:00:00-08:00</updated><id>https://mwburke.github.io/data%20science/2021/12/12/codenames-clue-generator-version-1</id><content type="html" xml:base="https://mwburke.github.io/data%20science/2021/12/12/codenames-clue-generator-version-1.html">&lt;p&gt;In this post, I’ll talk about how I built a clue generator for the game Codenames that provides a list of potential clues, numbers and associated target words, all with Tensorflow.&lt;/p&gt;

&lt;p&gt;My day job is mostly internally facing and so I took this on as a way to practice building product-focused data science projects.&lt;/p&gt;

&lt;h1 id=&quot;how-codenames-works&quot;&gt;How Codenames Works&lt;/h1&gt;

&lt;p&gt;If you already know how the game works, feel free to skip or read again for a quick reminder.&lt;/p&gt;

&lt;p&gt;Codenames is a card game with 2 teams. There are 25 cards laid out on the board, 9 belonging to one team, 8 belonging to another, 7 neutral and 1 double agent card.&lt;/p&gt;

&lt;p&gt;Each time has a &lt;strong&gt;codemaster&lt;/strong&gt; that can see which cards belong to which teams, and the remaining members of the teams are &lt;strong&gt;spies&lt;/strong&gt; that only see a single word on each card.&lt;/p&gt;

&lt;p&gt;The teams take turns having the codemaster provide a clue to their team made up of a single word and a number, with the clue relating to the number of cards on the board. The goal is to get the team to guess which words the clue is indicating, and they select cards to turn over.&lt;/p&gt;

&lt;p&gt;If they select a card belonging to their team, they can continue guessing, but if they flip over a card that doesn’t, their turn is immediately ended and they could suffer the negative consequences of potentially flipping over the other team’s card, bringing them closer to their goal, or flipping over the double agent card and instantly losing the game.&lt;/p&gt;

&lt;p&gt;Thus, the codemaster seeks to find clues that maximize the relationship to words on their team and minimize the relationship to words on the other team. Additionally, by finding clues with a larger number of cards it relates to, they can increase their chance of beating the other team by finishing first, but they risk having a lower relevance to each of the target cards and higher chance of accidentally missing a connection for opposing cards.&lt;/p&gt;

&lt;h1 id=&quot;how-i-built-it&quot;&gt;How I Built It&lt;/h1&gt;

&lt;h2 id=&quot;project-goals&quot;&gt;Project Goals&lt;/h2&gt;

&lt;p&gt;We represent a current board and team state with the following inputs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Current team’s cards&lt;/li&gt;
  &lt;li&gt;Opposing team’s cards&lt;/li&gt;
  &lt;li&gt;Neutral cards&lt;/li&gt;
  &lt;li&gt;Double agent card&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What we are looking for is a list of potential clues the codemaster could use with the following fields:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Clue word&lt;/li&gt;
  &lt;li&gt;Clue number&lt;/li&gt;
  &lt;li&gt;Target words the clue is intended to relate to&lt;/li&gt;
  &lt;li&gt;Quantitative measure of the quality of the clue&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;quantifying-clue-quality&quot;&gt;Quantifying Clue Quality&lt;/h2&gt;

&lt;p&gt;As with most data science problems, the hardest part if quantifying exactly what you are looking to maximize or predict. In this case, we have a vague notion of maximize and minimizing relevance of our clue word to words on the board. While there are many ways to do this, the way I chose to frame it for now is in terms of embeddings.&lt;/p&gt;

&lt;h3 id=&quot;word-embeddings&quot;&gt;Word Embeddings&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Word_embedding&quot;&gt;Word embeddings&lt;/a&gt; are a way to represent words quantitatively with a list of numbers, which we will refer to here as a vector. The main idea is that words with similar meanings will have similar number representations, and that related words will have a similar relationship. For example, woman -&amp;gt; man should have a similar relationship as queen -&amp;gt; king. Or Pooh -&amp;gt; Tigger should have a similar relationship as bear -&amp;gt; tiger (ok maybe this one’s a bit of a stretch, but you get the picture).&lt;/p&gt;

&lt;p&gt;Rather than generating my own, I used a pre-trained model from Tensorflow, the &lt;a href=&quot;https://tfhub.dev/google/Wiki-words-500/2&quot;&gt;Wiki-words-500&lt;/a&gt; text embedding that already generated a mapping from words to their vector representations. I now have a function to translate any given english word into a vector of length 500.&lt;/p&gt;

&lt;p&gt;Please see the end for discussions about future improvements related to choosing a embedding corpus.&lt;/p&gt;

&lt;h3 id=&quot;word-relevance---cosine-similarity&quot;&gt;Word Relevance - Cosine Similarity&lt;/h3&gt;

&lt;p&gt;Having numerical representations of words is a start, but what we really care about is the relationships between words. We need to compare the vectors to begin to use them.&lt;/p&gt;

&lt;p&gt;When comparing vectors, you will often hear the language of &lt;strong&gt;distance&lt;/strong&gt; and &lt;strong&gt;similarity&lt;/strong&gt;, which are two sides of the same coin, meaning difference and closeness of two vectors, respectively. For certain types of distances, we may just subtract the value from one to switch between the two.&lt;/p&gt;

&lt;p&gt;For this case, I chose to work with &lt;a href=&quot;https://en.wikipedia.org/wiki/Cosine_similarity&quot;&gt;cosine similarity&lt;/a&gt;, although I may look into other options in the future. This gives us a single number ranging from -1 to 1, with -1 indicating two words’ being as dissimilar as possible and 1 being equivalent.&lt;/p&gt;

&lt;h3 id=&quot;clue-quality-metric&quot;&gt;Clue Quality Metric&lt;/h3&gt;

&lt;p&gt;In order to summarize clue quality in a single number, we consider the benefits and penalties associated with the outcome of guessing a card on the table. Obviously, we want to incentivize choosing clues that are relevant to our team and decentivize other cards, with increasing penalties for the undesirable outcomes. Neutral ends our turn, the opposing team’s card ends our turn and advances them to the goal, and the double agent loses the game.&lt;/p&gt;

&lt;p&gt;The way we summarize this is by multiplying the cosine similarity for each card on the table by a set of coefficients that represent these benefits/penalties. The process is as folows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Extract word bank embeddings and cache since they will be reused for all games&lt;/li&gt;
  &lt;li&gt;Get current game word embeddings&lt;/li&gt;
  &lt;li&gt;Calculate cosine similarity between all game words and all word bank words&lt;/li&gt;
  &lt;li&gt;Multiply similarity scores by appropriate card type coefficients&lt;/li&gt;
  &lt;li&gt;Sum up all final scores for each word bank word to get clue quality metric&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This can all be accomplished very quickly with Tensorflow using their pre-trained embeddings and a series of matrix multiplications.&lt;/p&gt;

&lt;h4 id=&quot;clue-size&quot;&gt;Clue Size&lt;/h4&gt;

&lt;p&gt;We do have an additional constraint to limit the number of words that the clue relates to, which changes how we think about the quality metric. The overall structure remains the same, but we need some way to determine which of our team’s cards to include in the clue.&lt;/p&gt;

&lt;p&gt;The way I implemented it was to set a similarity threshold and only keep clues that have a similarity value equal to or greater than the threshold. This is the most straightforward way, and it ensures a global level of relevance. Of course, this introduces another parameter to tweak that we don’t have an exact way to measure the effectiveness of, and we do run the risk of excluding relevant clues that fall right below the cutoff. However, as problems go, having your team select another one of their cards is a decent one to have, although it may cause confusion later down the line.&lt;/p&gt;

&lt;p&gt;The above process for calculating the quality metric remains the same as above, but, first we go through and remove all cards below the similarity threshold, and then calculate the contribution of the remaining ones towards our metric.&lt;/p&gt;

&lt;h4 id=&quot;setting-coefficients&quot;&gt;Setting Coefficients&lt;/h4&gt;

&lt;p&gt;It’s clear that we want a positive coefficient for our cards and monotonically decreasing negative coefficients for opposing, neutral and double agent cards respectively, but it’s not obvious exactly what they should be for several reasons:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;All of the coefficients are relative to one another so there isn’t a single global optimum&lt;/li&gt;
  &lt;li&gt;We are codifying the codemaster’s risk preferences to a single set of numbers
    &lt;ul&gt;
      &lt;li&gt;Some people may have a higher risk tolerance for clues similar to the double agent card, or they may never want to even have a small chance of guessing it&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The number of cards in each category changes over the course of the game
    &lt;ul&gt;
      &lt;li&gt;We may need to scale the contributions of remaining team/opposing cards. If both teams are guessing accurately, there will be few cards belonging to them and a higher concentration of neutral cards.&lt;/li&gt;
      &lt;li&gt;This may dilute the quality metric by having it be mostly composed of negative scores. The clues will mostly be avoiding the other cards rather than leaning towards the remaining cards&lt;/li&gt;
      &lt;li&gt;It remains to be seen if this problematic, or if at that point, the codemaster no longer needs to rely on a clue generator since the problem space is much smaller&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;We don’t have a clear metric on how to evaluate the effectiveness of the metric as of now&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;solution-validation--testing-plans&quot;&gt;Solution Validation / Testing Plans&lt;/h2&gt;

&lt;p&gt;Number 4 above is the elephant in the room: &lt;strong&gt;How do we know our solution is effective?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The ideal method would be to test a bunch of games with randomly assigned teams, and provide the test teams with access to the clue recommendations. Our expectation is that the win rates would be equal between groups, and any significant difference would be driven by access to the tool. I would rather test giving tool access, but not mandating usage, because that’s a more realistic scenario in practice than forcing them to use the top recommendations every time. At this point, I don’t think we would consistently beat player intuition, so it’s not a valid comparison. However, the time required to get volunteers and acquire data seems impractical, so are there any other ways we can perform testing?&lt;/p&gt;

&lt;h3 id=&quot;backtesting&quot;&gt;Backtesting&lt;/h3&gt;

&lt;p&gt;If you run a codenames online site with textual clue inputs, you could backtest and see how many times the clues recommended by users would have been recommended by the tool.There are multiple metrics used in recommender systems you could use to evaluate performance including &lt;a href=&quot;https://en.wikipedia.org/wiki/Discounted_cumulative_gain&quot;&gt;NDCG&lt;/a&gt; or an adapted version of &lt;a href=&quot;http://sdsawtelle.github.io/blog/output/mean-average-precision-MAP-for-recommender-systems.html&quot;&gt;Mean Average Precision&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Regardless of what method you use, there are several problems:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Sometimes people give bad clues. I’ve done it, others do it. It’s fairly common. How will this affect our scores?
    &lt;ul&gt;
      &lt;li&gt;We could potentially do some censoring to only include clues where the codemaster’s team guessed all of the associated words correctly if we had access to it. We could determine whether or not they guessed the correct amount of clues, but as far as I’ve seen, online sites don’t seem to have tagging for relevant words to clues. At the very least, it would be a more fair comparison, even if there’s still a known source of error.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The recommender word bank may include many words not in the common vernacular that are still relevant. Should they be penalized just because they’re niche?&lt;/li&gt;
  &lt;li&gt;We don’t have any proper nouns in our word bank. These can be very effective: think Potter for ceramic and magic as an example.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;mechanical-turk&quot;&gt;Mechanical Turk&lt;/h3&gt;

&lt;p&gt;A common way to generate datasets for bespoke targets is through &lt;a href=&quot;https://www.mturk.com/&quot;&gt;Amazon Mechanical Turk&lt;/a&gt; , where you can get people to complete arbitrary tasks online for money. This often is used in ML to generate labels for unsupervised data such as images or natural language.&lt;/p&gt;

&lt;p&gt;In this case, proper evaluation takes a fair amount of background understanding of the game just to be able to make evaluations, and for accurate evaluations, experience actually playing. Given the cost of getting random people to take time to learn a new game, confirm that their understanding is accurate, and then to actually play test games would be exorbitant, we need to modify our method into easier to consume subtasks that are proxies for clue quality.&lt;/p&gt;

&lt;p&gt;I propose that we could potentially focus on getting people to evaluate clue similarity or dissimilarity to a set of words. This could be done either as choosing the most/least relevant clue to a set of words from a list of potential clues, or providing a clue and bank of words, and having them choose the most/least relevant words to the clue. This removes the need to evaluate multiple objectives simultaneously, and increases the amount of data we could collect per dollar. Evaluation would be between existing versions of the clue generator, or between existing game samplesa dn the clue generator.&lt;/p&gt;

&lt;p&gt;Again, this suffers from not actually evaluating performance on the game metrics, but, once we have an existing solution we deem is working well, we could use it as a way to test champion/challenge models on specific parts of the quality score (similarity to team words, dissimilarity to all other words).&lt;/p&gt;

&lt;h1 id=&quot;future-work&quot;&gt;Future Work&lt;/h1&gt;

&lt;p&gt;If not obvious by now, there are a lot of potential areas for improvement that I would like to pursue given time, but here are some of the main ones:&lt;/p&gt;

&lt;h2 id=&quot;graph-based-similarity&quot;&gt;Graph-Based Similarity&lt;/h2&gt;

&lt;p&gt;The current approach suffers from words with multiple meanings, the curse of dimensionality, a lack of concrete, objective measurements of similarity, and proper nouns in the word bank.&lt;/p&gt;

&lt;p&gt;Switching to a knowledge graph, or even web-search &lt;a href=&quot;https://en.wikipedia.org/wiki/PageRank&quot;&gt;PageRank&lt;/a&gt; like approach would help shore up the above problems and maybe be used in tandem with semantic similarity recommendations if not replacing it entirely.&lt;/p&gt;

&lt;h2 id=&quot;word-embeddings-1&quot;&gt;Word Embeddings&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Additional research into more appropraite pre-trained word embeddings&lt;/li&gt;
  &lt;li&gt;Generate our own embeddings by training an NLP model on a corpus we designed for this&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;quality-metric&quot;&gt;Quality Metric&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Add a relative score component for clue selection
    &lt;ul&gt;
      &lt;li&gt;Using an elbow method similar to identifying the appropriate number of clusters?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Scaling based on number of cards still available to deal with clue dilution of team’s cards compared to other cards&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;resources&quot;&gt;Resources&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://codenames.game/&quot;&gt;Codenames Online Game&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Word Embeddings:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://machinelearningmastery.com/what-are-word-embeddings/&quot;&gt;Machine Learning Mastery: What Are Word Embeddings&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Tensorflow has a &lt;a href=&quot;https://www.tensorflow.org/text/guide/word_embeddings&quot;&gt;guide to working with embeddings&lt;/a&gt; in a neural network for those who work in ML/NLP.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Cosine_similarity&quot;&gt;Cosine Similarity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Matthew Burke</name><email>matthew.wesley.burke@gmail.com</email></author><category term="Data Science" /><category term="python" /><category term="ml" /><category term="tensorflow" /><summary type="html">Utilizing Tensorflow pre-trained embeddings to recommend potential clues to the codemasters in the card game Codenames</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mwburke.github.io/images/codenames_cover.jpg" /><media:content medium="image" url="https://mwburke.github.io/images/codenames_cover.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Basic Geometric Tiling</title><link href="https://mwburke.github.io/generative%20art/2019/06/18/basic-tiling.html" rel="alternate" type="text/html" title="Basic Geometric Tiling" /><published>2019-06-18T00:00:00-07:00</published><updated>2019-06-18T00:00:00-07:00</updated><id>https://mwburke.github.io/generative%20art/2019/06/18/basic-tiling</id><content type="html" xml:base="https://mwburke.github.io/generative%20art/2019/06/18/basic-tiling.html">&lt;h1 id=&quot;geometric-tiling&quot;&gt;Geometric Tiling&lt;/h1&gt;

&lt;p&gt;I went on vacation to Italy recently, and while I was there, I fell in love with the mosaic tilings in the Cathedral of Santa Maria del Fiore and Baptistery of St. John in Florence. In general, I’m a huge fan of geometric design, but the designs reallly caught my eye, and I did my best to recreate some of them in processing with some nonstandard color palettes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/italy_mosaic_1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/italy_mosaic_2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If these piqued your interest, I’d recommend checking out more &lt;a href=&quot;https://mwburke.github.io/generative-art/posts/030.html&quot;&gt;at my generative art site&lt;/a&gt;, or much better, go visit Florence yourself and get inspired!&lt;/p&gt;

&lt;p&gt;Of course, once I returned home and was talking about how beautiful the tiling was, I was informed about &lt;a href=&quot;https://en.wikipedia.org/wiki/Islamic_geometric_patterns&quot;&gt;Islamic geometric patterns&lt;/a&gt;, which blew Italy out of the water in terms of complexity and creativity. I definitely will be reviewing my future travel plans in light of this discovery, and in the meantime, I hopefully can learn more about their theory and history to get a better appreciation of them.&lt;/p&gt;

&lt;h2 id=&quot;organic-tiling-truchet-patterns&quot;&gt;Organic Tiling: Truchet Patterns&lt;/h2&gt;

&lt;p&gt;While geometric patterns are always awesome, I had recently run into &lt;a href=&quot;https://christophercarlson.com/portfolio/multi-scale-truchet-patterns/&quot;&gt;this article&lt;/a&gt; talking about truchet patterns, and wanted to try something a little more rounded and actually generative to see if it had a more “organic” feel about it.&lt;/p&gt;

&lt;p&gt;The idea behind them, is that they are square tiles with round internal paths/connections that can be connected to any other tile pattern. It didn’t take long to create each one of them, but after just generating a random tileset, the results are rather unsatisfying:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/truchet_pattern_4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is pretty much inline with what I have been viewing and reading from well-known generative artists, and so I took a stab at creating a little more structure into the process by nesting squares of patterns within each other and was quite pleased:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/truchet_pattern_1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/truchet_pattern_3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I took it a step further, and while still limiting the available tiles and placing them diagonally, I allowed the rotation vary. These might be some of my favorite results in that they’re not so random as to be without structure, but it seems more natural:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/truchet_pattern_2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There’s definitely more work I could do with utilizing the smaller subtiling and larger amount of tiles, but I’ll put that ahead for future work. If you’re interested in seeing more of these patterns, you can &lt;a href=&quot;https://mwburke.github.io/generative-art/posts/032.html&quot;&gt;do so here&lt;/a&gt; and create as many as you want!&lt;/p&gt;

&lt;p&gt;I hope to do some more work on hexagonal tiling with connections based on node-based growth algorithms, which I think have a lot of potential for walking the line between structure and chaos.&lt;/p&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://christophercarlson.com/portfolio/multi-scale-truchet-patterns/&quot;&gt;Multi-Sscale Truchet Patterns - Christopher Carlson&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Matthew Burke</name><email>matthew.wesley.burke@gmail.com</email></author><category term="Generative Art" /><category term="p5js" /><summary type="html">Inspiration from Italian Mosaics</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mwburke.github.io/images/placeholder.png" /><media:content medium="image" url="https://mwburke.github.io/images/placeholder.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Multi-Armed Bandits Exploration</title><link href="https://mwburke.github.io/data%20science/2019/06/18/bandits-exploration.html" rel="alternate" type="text/html" title="Multi-Armed Bandits Exploration" /><published>2019-06-18T00:00:00-07:00</published><updated>2019-06-18T00:00:00-07:00</updated><id>https://mwburke.github.io/data%20science/2019/06/18/bandits-exploration</id><content type="html" xml:base="https://mwburke.github.io/data%20science/2019/06/18/bandits-exploration.html">&lt;h2 id=&quot;multi-armed-bandit-overview&quot;&gt;Multi-Armed Bandit Overview&lt;/h2&gt;

&lt;p&gt;A multi-armed what?? If you don’t know what the multi-armed bandit problem is, then you may be confused. I’m assuming that you have some background on this for the rest of the post, but if you don’t, here’s a quick rundown:&lt;/p&gt;

&lt;p&gt;Pretend you are a someone who’s looking to go gambling, and an old style slot machine (aka bandit, don’t worry about why) you can choose from that has multiple arms. Your goal is (obviously) to make the most amount of money from putting coins into it and pulling the arms. However, given that you can only try one arm at a time, how do you find the arms(s) that give you the most bang for your buck without wasting time on arms that just eat your money?&lt;/p&gt;

&lt;p&gt;That’s essentially what the multi-armed bandit problem is. How do we maximize rewards by &lt;em&gt;exploring&lt;/em&gt; new arms we don’t know much about (have only played zero or a few times), while still &lt;em&gt;exploiting&lt;/em&gt; (or taking advantage of) the arms we already know give us good rewards?&lt;/p&gt;

&lt;p&gt;Alright, now that we’ve covered that, we can jump into some code and ways I explored common algorithms used to maximize profits in this scenario.&lt;/p&gt;

&lt;h2 id=&quot;bandit-definitions&quot;&gt;Bandit Definitions&lt;/h2&gt;

&lt;p&gt;But first, let’s look again at how the bandits themselves are defined. I played around with two types:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Bernoulli Bandit&lt;/strong&gt;: each arm in the bandit has a set probability each time it’s pulled of returning a reward of 1 or 0&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Gaussian Bandit&lt;/strong&gt;: each arm in the bandit has a mean and standard deviation that define a gaussian distribution. When pulled, it samples from that distribution to return a reward.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here’s a quick visualization of means and a standard deviation away from those means to get an idea of the potential overlap in rewards you may get from the gaussian bandits. The x axis is the arm number, and the y axis is the reward distribution.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/gaussian_rewards.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Clearly arms 3-4 are the highest ones, but their rewards still overlap greatly with 2, and it would be tricky to tell which one is best, given the amount of noise when sampling.&lt;/p&gt;

&lt;h2 id=&quot;execution&quot;&gt;Execution&lt;/h2&gt;

&lt;p&gt;The methods to choose arms in a programmatic away could be called methods or algorithms or whatever, but since I’ve been exploring reinforcement learning recently, I’m going to call them agents.&lt;/p&gt;

&lt;p&gt;At each timestep a few things happen:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The agent evaluates its current stored information and chooses an arm to interact with&lt;/li&gt;
  &lt;li&gt;The agent pulls the chosen arm and receives a reward in return&lt;/li&gt;
  &lt;li&gt;The agent makes updates to its stored information based on the reward&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The parts where the different methods differ is mainly in step 1, where they use different methods to choose the arm. Step 3 supports step 1 by updating the stored information, and is similar across most agents with some minor differences.&lt;/p&gt;

&lt;h3 id=&quot;evaluation-procedure&quot;&gt;Evaluation Procedure&lt;/h3&gt;

&lt;p&gt;In the following section, I compare agents with different parameters to each other by running an agent against a bandit for a pre-defined number of timesteps repeatedly. By doing this multiple times and tracking the rewards at each timestep, we can get a sense of what average performance we can expect from the agent at each timestep.&lt;/p&gt;

&lt;p&gt;Naturally, we should see lower average rewards earlier on since we are still exploring and are uncertain of which arms provide the best value, but what we hope to see is a gradual increase in rewards until we identify the optimal arm, at which point the rewards should flatten out to the average of the optimal arm’s reward.&lt;/p&gt;

&lt;p&gt;The two plots I include each with the comparisons track both of the metrics over time:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Average reward at each timestep&lt;/li&gt;
  &lt;li&gt;Percent of times the agent chose the optimal arm at that timestep&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As you will see, the former can be a rather noisy chart (especially with gaussian reward functions), but the latter results in a smoother chart.&lt;/p&gt;

&lt;h2 id=&quot;agents&quot;&gt;Agents&lt;/h2&gt;

&lt;h3 id=&quot;epsilon-greedy&quot;&gt;Epsilon Greedy&lt;/h3&gt;

&lt;p&gt;The epsilon greedy agent is an agent is defined by two parameters: epsilon and epsilon decay.&lt;/p&gt;

&lt;p&gt;Every timestep, in order to select the arm to choose, the agent generates a random number between 0 and 1. If the value is below epsilon, then the agent selects a random arm. Otherwise, it chooses the arm with the highest average reward (breaking ties randomly), thus exploiting what it knows.&lt;/p&gt;

&lt;p&gt;A higher epsilon results in more exploration (random arm selections), and a lower epsilon results in more exploitation.&lt;/p&gt;

&lt;p&gt;Because we may not want to keep the same epsilon over the life of our problem, we introduce the epsilon decay parameter, which decreases the value of epsilon after each timestep. This naturally lends itself towards a high explore approach at the beginning when we are unsure of the arm rewards, and a high exploit approach later on once we have more information.&lt;/p&gt;

&lt;p&gt;In theory, this seems like a good idea, but in practice (with noisy rewards), decaying epsilon seems to have slightly lower performance. However, I did not implement a minimum epsilon, which could help by preventing a fully-exploit scenario.&lt;/p&gt;

&lt;p&gt;Below is a comparison of some different parameters of epsilon greedy agents:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/eps_greedy_rewards.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/eps_greedy_optimal_arms.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is a comparison of the best decay rate I found (ratio of 0.9999 per timestep) with different starting epsilon values.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/eps_greedy_decay.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ucb&quot;&gt;UCB&lt;/h3&gt;

&lt;p&gt;The upper confidence bound (UCB) agent tracks the average reward for each arm similar to epsilon greedy, but rather than encoding its exploration as a binary random chance, it attempts to measure uncertainty in terms of how long it has been since a arm has been chosen.&lt;/p&gt;

&lt;p&gt;Each timestep, the agent chooses the arm with the highest average reward plus “uncerainty”, and the uncertainty for each arm not chosen increases a little bit.&lt;/p&gt;

&lt;p&gt;Earlier on, every timestep where a arm is not chosen increases uncertainty by a significant amount. As the system time grows, the uncertainty contributed by each timestep decreases since we should have more accurate estimates of rewards as time progresses.&lt;/p&gt;

&lt;p&gt;An important note is that this uncertainty is not what we normally think of in statistics and is &lt;strong&gt;not related to the variance of the reward estimates&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The influence of the uncertainty factor is determined by a parameter C. Below is a comparison of some runs with different values of C:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ucb_pct_arms.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One of the main purposes of this repo was to help visualize the UCB agent, in terms of how it balances the average rewards received so far and the uncertainty of unused arms.&lt;/p&gt;

&lt;p&gt;Below is as gif of a UCB agent in action. Each frame in the gif is a step where the agent chose an action, received a reward, and updated its estimates/uncertaintities for each arm.&lt;/p&gt;

&lt;p&gt;The blue parts of each bar are the average rewards for that arm, and the orange parts are the uncertainty. You should be able to see the blue parts jump around as the highest total blue + orange arm is pulled, while the non-pulled arms’ orange parts should steadily increase until they become the highest bars.&lt;/p&gt;

&lt;p&gt;At first, the values will most likely jump around more as the variance of the reward estimates is large, but as it progresses, it should settle into selecting a few arms repeatedly until there is one main winner.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ucb_race_gif.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;gradient-method&quot;&gt;Gradient Method&lt;/h3&gt;

&lt;p&gt;The prior two algorithms choose arms based on the average score values, selecting the highest performing one (with some initial exploration). Gradient-based algorithms instead relies on relative preferences for each arm that do not necessarily correspond to actual rewards values. At each timestep, the rewards for an arm are observed, and then an incremental update to the existing preference score is made based on new score and a parameter alpha. This is similar to stochastic gradient ascent, and a larger alpha will result in a larger step size.&lt;/p&gt;

&lt;p&gt;The details for updating the preference values &lt;script type=&quot;math/tex&quot;&gt;H_{t}(a)&lt;/script&gt; for selection probabilities &lt;script type=&quot;math/tex&quot;&gt;\pi_{t}(a)&lt;/script&gt; selected action &lt;script type=&quot;math/tex&quot;&gt;A_{t}&lt;/script&gt;, rewards &lt;script type=&quot;math/tex&quot;&gt;R_{t}&lt;/script&gt;, and average reward &lt;script type=&quot;math/tex&quot;&gt;\overline{R_{t}}&lt;/script&gt; are as follows:&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;H_{t+1}(A_{t}) = H_{t}(A_{t}) + \alpha (R_{t} - \overline{R_{t}})(1 - \pi_{t}(A_{t}))&lt;/script&gt; for action &lt;script type=&quot;math/tex&quot;&gt;A_{t}&lt;/script&gt; and&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;H_{t+1}(a) = H_{t}(a) - \alpha (R_{t} - \overline{R_{t}})\pi_{t}(a)&lt;/script&gt; for other actions &lt;script type=&quot;math/tex&quot;&gt;a \neq A_{t}&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;When choosing an arm, the agent passes these arm preferences through the softmax distribution to assign weights to all arms that add up to one. These weights are the probabilities that each arm is chosen. After each step, the average rewards are updated, then the weights for sampling are recalculated.&lt;/p&gt;

&lt;p&gt;In case you aren’t familiar, the softmax distribution is as follows: &lt;script type=&quot;math/tex&quot;&gt;P\{A_{t} = a\} = \frac{e^{H_{t}(a)}}{\sum_{b=1}^k e^{H_{t}(b)}}&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;One thing to note is that the average rewards at the start before any weights are input affects the results. Starting all arms out with a value greater than zero will still have an effect of an equal chance for all arms to be selected, but will encourage more exploration in the short term before potentially lowering poorly performing probabilities of being selected almost to zero.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/gradient_pct_arms.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;interactive-notebook&quot;&gt;Interactive Notebook&lt;/h2&gt;

&lt;p&gt;I created a &lt;a href=&quot;https://github.com/mwburke/bandits&quot;&gt;github repo&lt;/a&gt; with all of the code used to generate these plots, with a &lt;a href=&quot;https://github.com/mwburke/bandits/blob/master/walkthrough.ipynb&quot;&gt;notebook&lt;/a&gt; ready to to re-run them and change any parameters so you can get an intuition about how some of these common agent algorithms work.&lt;/p&gt;

&lt;p&gt;I’d highly recommend playing around with different numbers of arms, bernoulli rewards, and various levels of noise in the gaussian rewards by increasing and decreasing the standard deviation compared to the means.&lt;/p&gt;</content><author><name>Matthew Burke</name><email>matthew.wesley.burke@gmail.com</email></author><category term="Data Science" /><category term="python" /><category term="ml" /><category term="probability" /><summary type="html">Benchmark Comparisons and UCB Visualization</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mwburke.github.io/images/placeholder.png" /><media:content medium="image" url="https://mwburke.github.io/images/placeholder.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Introduction to Idyll</title><link href="https://mwburke.github.io/data%20visualization/2018/12/04/idyll-pumpkin-taste-test.html" rel="alternate" type="text/html" title="Introduction to Idyll" /><published>2018-12-04T00:00:00-08:00</published><updated>2018-12-04T00:00:00-08:00</updated><id>https://mwburke.github.io/data%20visualization/2018/12/04/idyll-pumpkin-taste-test</id><content type="html" xml:base="https://mwburke.github.io/data%20visualization/2018/12/04/idyll-pumpkin-taste-test.html">&lt;p&gt;Over Thanksgiving, some friends of mine set out to find the best pumpkin pie recipe and in the process, baked 5 different pies for comparison. After enjoying and ranking them, they decided to open the survey population to let others determine what the truly best pie was with a blind taste test. Being a data nerd himself, my friend tracked all of these responses and passed htem onto me so that I could take a stab at visualizing them with a new data interactive visualization framework I had recently discovered.&lt;/p&gt;

&lt;h1 id=&quot;idyll&quot;&gt;&lt;a href=&quot;https://idyll-lang.org/&quot;&gt;Idyll&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://idyll-lang.org/&quot;&gt;Idyll&lt;/a&gt; is, according to their website, “a toolkit for creating data-driven stories and explorable explanations” that makes it simple and quick to create interactive visualizations, and in my opinion, it’s the easiest tool out there to get involved with the communication medium of &lt;a href=&quot;https://pudding.cool/process/responsive-scrollytelling/&quot;&gt;“scrollytelling”&lt;/a&gt;. The base &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.idyll&lt;/code&gt; file that renders into the final webpage is based on Markdown, but it has a few features that make it an extremely effective tool to prototype quickly but still support more advanced work.&lt;/p&gt;

&lt;h2 id=&quot;react-integration&quot;&gt;React Integration&lt;/h2&gt;

&lt;p&gt;One of the most powerful aspects is that it is integrated with React so enable the easy inclusion of pre-made components. It natively has support for a set of simple graphs generated from csv or json files. I wasn’t able to generate what I wanted with these, so I went ahead and added &lt;a href=&quot;https://vega.github.io/vega-lite/&quot;&gt;vega-lite&lt;/a&gt; through npm and within a few minutes had a new chart from my existing data source.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/idyll_intro_votes.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Additionally, it’s fairly straightforward to take existing d3 visualizations, make a few minor modifications, wrap them in a React component and them embed onto your page. In my test, I included a &lt;a href=&quot;https://en.wikipedia.org/wiki/Parallel_coordinates&quot;&gt;parallel coordinates chart&lt;/a&gt;  taken directly &lt;a href=&quot;https://beta.observablehq.com/@jerdak/parallel-coordinates-d3-v4&quot;&gt;an Observable notebook&lt;/a&gt;, changed a few lines of CSS and had a working chart much faster than I expected.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/idyll_parallel_coordinates.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;property-management&quot;&gt;Property Management&lt;/h2&gt;

&lt;p&gt;The other fantastic feature of Idyll is the ability to create and manage variables with properties you can both acacess in your different components as wlel as recalculate in real time based on user input.&lt;/p&gt;

&lt;p&gt;For example, I can have a variable that can be modified from a variety of pre-made source  including a button, slider, text, scroll trigger, etc that can in turn update any visualizations on the page with the new properties. I don’t have to write any additional event listeners and can reuse these properties wherever I want to on the page. I didn’t leverage a ton of these features other than reusing some of my data files and visualization configuration parameters such as width/height, but the possibilities really are endless.&lt;/p&gt;

&lt;h1 id=&quot;getting-started-with-idyll&quot;&gt;Getting Started with Idyll&lt;/h1&gt;

&lt;p&gt;If you would also like to get started with Idyll for your own projects, you can take a look at the &lt;a href=&quot;/idyll-test-pumpkin/&quot;&gt;full post I created with Idyll&lt;/a&gt; and &lt;a href=&quot;https://github.com/mwburke/idyll-test-pumpkin&quot;&gt;the underlying code&lt;/a&gt; to see how it was generated, and then head on over to Idyll’s &lt;a href=&quot;https://idyll-lang.org/gallery&quot;&gt;Example Gallery&lt;/a&gt; page to see amazing work on how far you can take this framework.&lt;/p&gt;

&lt;h2 id=&quot;whats-the-catch&quot;&gt;What’s the Catch?&lt;/h2&gt;

&lt;p&gt;Tools always have tradeoffs and Idyll embraces a markdown-like language which allows quick development. For more advanced visualizations and custom triggers, it may be worth choosing a more flexible for time-consuming framework to get the exact effects you want.&lt;/p&gt;

&lt;p&gt;Additionally, the work only supports single-post rendering as of now, and the user has to create their own process for hosting multiple posts on a single website/platform. There are a few options out there trying to deal with this, but &lt;a href=&quot;https://github.com/idyll-lang/idyll/issues/421&quot;&gt;according to this github issue&lt;/a&gt;, it looks like they’re beginning development to support this.&lt;/p&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h2&gt;

&lt;p&gt;Here are some great sites to understand the potential of what can really be done with interactive visualization for storytelling and data communication.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pudding.cool/&quot;&gt;The Pudding&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fivethirtyeight.com/&quot;&gt;FiveThirtyEight&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.informationisbeautifulawards.com/news/118-the-nyt-s-best-data-visualizations-of-the-year&quot;&gt;The NY Times&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Matthew Burke</name><email>matthew.wesley.burke@gmail.com</email></author><category term="Data Visualization" /><category term="d3" /><summary type="html">Visualizing Pumpkin Pie Taste Test Results</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mwburke.github.io/images/placeholder.png" /><media:content medium="image" url="https://mwburke.github.io/images/placeholder.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Probability Calibration</title><link href="https://mwburke.github.io/data%20science/2018/11/26/probability-calibration.html" rel="alternate" type="text/html" title="Probability Calibration" /><published>2018-11-26T00:00:00-08:00</published><updated>2018-11-26T00:00:00-08:00</updated><id>https://mwburke.github.io/data%20science/2018/11/26/probability-calibration</id><content type="html" xml:base="https://mwburke.github.io/data%20science/2018/11/26/probability-calibration.html">&lt;h1 id=&quot;predictions-as-confidence&quot;&gt;Predictions As Confidence&lt;/h1&gt;

&lt;p&gt;As you may already know, classification problems in machine learning commonly (though not always) use algorithms that output a &lt;em&gt;predicted probability&lt;/em&gt; value that can be used to gauge confidence in how sure your model is that the input belongs to one particular class.&lt;/p&gt;

&lt;h1 id=&quot;setting-probability-thresholds&quot;&gt;Setting Probability Thresholds&lt;/h1&gt;

&lt;p&gt;In introductory ML courses, a default value of 0.50 is usually used as the prediction cutoff for making the decision to consider a binary classification output as either positive or negative class, but in industry, selecting the right cutoff threshold is critical to making good business decisions.&lt;/p&gt;

&lt;p&gt;If the cost associated with false negatives is large, it may be optimal to use a lower probability decision threshold to capture more positive users at the expense of including more false positives, and vice versa, and the data scientist will work with the business units to balance this tradeoff in order to minimize cost or maximize the benefit. Ultimately, this causes the predictions to act more as a ranking system for applications that require binary classifications as the final output than actually leveraging the values themselves.&lt;/p&gt;

&lt;h1 id=&quot;interpretation-problems&quot;&gt;Interpretation Problems&lt;/h1&gt;

&lt;h2 id=&quot;model-as-ranking&quot;&gt;Model As Ranking&lt;/h2&gt;

&lt;p&gt;This model-as-ranking system works fine in many situations, but what happens when your predicted probability does not actually represent the probability and the business unit consuming your predictions assumes that they are? An example of this might be the likelihood of conversion for a given user, which is then multiplied by potential LTV to prioritize leads for a sales organization based on expected ROI. If a model tends to over/underestimate probabilities at the lower/upper ends of the predicted probability spectrum respctively (as random forest models have been known to do), you can end up spending effort on individuals who are less worth the team’s time, wasting resources and potentially losing revenue.&lt;/p&gt;

&lt;p&gt;Scikit-learn has a great overview on some common algorithms that result in biased predicted probabilities. I’ve taken the liberty of displaying the chart from that overview here. Visit &lt;a href=&quot;https://scikit-learn.org/stable/auto_examples/calibration/plot_compare_calibration.html&quot;&gt;this link&lt;/a&gt; to get the full code used to generate the plot or just look at the documentation for the &lt;a href=&quot;https://scikit-learn.org/stable/modules/generated/sklearn.calibration.calibration_curve.html&quot;&gt;sklearn.calibration.calibration_curve&lt;/a&gt; function&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/calibration_curve_1.png&quot; alt=&quot;https://scikit-learn.org/stable/auto_examples/calibration/plot_compare_calibration.html&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;parallel-model-consumption&quot;&gt;Parallel Model Consumption&lt;/h2&gt;

&lt;p&gt;Additionally, models can be used in conjunction with one another to provide targets in context. Going back to our expected LTV example, a business may have separate conversion likelihood models for different segments of their customer population, with every user being assigned a conversion probability from a single model. If not all models produce well-calibrated predicted probabilities, one could end up dominating the others while still having good metrics when considered individually.&lt;/p&gt;

&lt;h3 id=&quot;auroc-can-be-misleading&quot;&gt;AUROC Can Be Misleading&lt;/h3&gt;

&lt;p&gt;One common performance metric that is used to measure the effectiveness of the model across the range of predicted probabilities is the area under the receiving operating characteristic (ROC) curve. In case you aren’t familiar with the ROC curve, it is a plot of the model’s true positive rate vs the false positive rate as the probability is varied from 0 to 1, and as such, it is considered more of a robust metric than accuracy alone in cases where classes are imbalanced or the cost of true/false positives are unknown as of yet.&lt;/p&gt;

&lt;p&gt;While it is a good metric, it is &lt;strong&gt;not&lt;/strong&gt; sensitive to the absolute value of the predicted probabilities, only the performance at every probability point. If all of the predicted probabilities are multiplied by a constant, the value of the AUROC does not change, which may mislead the modeler into believing their probabilities are good to use, while in fact, they are consistently over/underestimating the results.&lt;/p&gt;

&lt;p&gt;For example, the three predicted probability density distributions below are just scaled versions of the output from the same model. Their distributions are obviously very different from one another, but because they are scaled by a constant, they all have an equivalent AUROC score.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/pred_probs_scaled.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;validation-with-additional-scoring-methods&quot;&gt;Validation with Additional Scoring Methods&lt;/h1&gt;

&lt;p&gt;As with most modeling, it’s impossible to represent overall performance with a single number, and if you have concerns about validating probability calibration, it seems wise to include additional scores alongside AUROC that are more representative of actual differences in calibration such as log loss or the brier score.&lt;/p&gt;

&lt;p&gt;Log loss is a common loss function, but &lt;a href=&quot;https://en.wikipedia.org/wiki/Brier_score&quot;&gt;brier score&lt;/a&gt; was new to me, and according to wikipedia “can be thought of as… a measure of the ‘calibration’ of a set of probabilistic predictions”. It essentially is the average squared difference between the probability that was forecast and the actual outcome of the event. This makes its interpretation analogous to the RMSE for regression problems, and does take into account the scale of the predictions.&lt;/p&gt;

&lt;h1 id=&quot;sampling-bias&quot;&gt;Sampling Bias&lt;/h1&gt;

&lt;p&gt;Many problems have imbalanced datasets in terms of the target variable with a significant portion of the records belonging to one class. Various techniques have been developed to counteract these problem, including oversampling the minority class, downsampling the majority class and generating synthetic samples from the minority class to closer achieve class number parity. However, these techniques can result in increased AUROC scores while biasing the predicted probabilities to be less calibrated to actual.&lt;/p&gt;

&lt;p&gt;Here is an example of how a generally well calibrated classifier (Logistic Regression) can be biased depending upon the ratio of the positive to negative class in the training dataset:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/calibration_curve_2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;further-research&quot;&gt;Further Research&lt;/h2&gt;

&lt;p&gt;Scikit-learn has implemented the &lt;a href=&quot;https://scikit-learn.org/stable/modules/generated/sklearn.calibration.CalibratedClassifierCV.html&quot;&gt;CalibratedClassifierCV&lt;/a&gt; class to adjust your classifiers to be more calibrated either during training, or to adjust the predictions by calibrating the classifier post-training.&lt;/p&gt;

&lt;p&gt;It has two options for doing so:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Platt_scaling&quot;&gt;Platt Scaling&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Isotonic_regression&quot;&gt;Isotonic Regression&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Matthew Burke</name><email>matthew.wesley.burke@gmail.com</email></author><category term="Data Science" /><category term="probability" /><category term="ml" /><summary type="html">Predictions As Actual Probabilities</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mwburke.github.io/images/placeholder.png" /><media:content medium="image" url="https://mwburke.github.io/images/placeholder.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">My Intro to Generative Art</title><link href="https://mwburke.github.io/generative%20art/2018/07/09/generative-art-p5js.html" rel="alternate" type="text/html" title="My Intro to Generative Art" /><published>2018-07-09T00:00:00-07:00</published><updated>2018-07-09T00:00:00-07:00</updated><id>https://mwburke.github.io/generative%20art/2018/07/09/generative-art-p5js</id><content type="html" xml:base="https://mwburke.github.io/generative%20art/2018/07/09/generative-art-p5js.html">&lt;h1 id=&quot;what-is-generative-art&quot;&gt;What is generative art?&lt;/h1&gt;

&lt;p&gt;Generative art is procedurally generated art for those of us who are less traditionally artistically inclined. More specifically, those who have no skill but still have enough appreciation for art and mathematical principles to automate the creation of things that look snice.&lt;/p&gt;

&lt;h1 id=&quot;javascript-libraries&quot;&gt;Javascript Libraries&lt;/h1&gt;

&lt;p&gt;The go-to library for web-based mathematical visualization is &lt;a href=&quot;d3js.org&quot;&gt;d3&lt;/a&gt;, and many visualization libraries are based upon it. However, recently I stumbled across &lt;a href=&quot;https://processing.org/&quot;&gt;processing&lt;/a&gt;, and it’s javascript equivalent &lt;a href=&quot;https://p5js.org/&quot;&gt;p5js&lt;/a&gt;, which are amazing for creating procedurally generated visualizations. It’s inherently build to support an initialization process with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup&lt;/code&gt; function and a function to update the visualization frame-by-frame with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;draw&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;It’s easy to pick up and get going and create something really quickly, and it’s only been a few days since I’ve heard about it, and I’ve already had tons of fun learning the API and using the basics to create some “art” I’m happy with. I highly encourage you to check it out and maybe some of the stuff I’ve made recently &lt;a href=&quot;http://mwburke.github.io.com/generative-art&quot;&gt;at my interactive generative art website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are too lazy to click on the link, here’s a few examples of the static visualizations as well as the one in the post header.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://worksofchart.com/generative-art/posts/002.html&quot;&gt;&lt;img src=&quot;/images/generative-art-2.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://worksofchart.com/generative/art/posts/010.html&quot;&gt;&lt;img src=&quot;/images/generative-art-10.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://worksofchart.com/generative/art/posts/011.html&quot;&gt;&lt;img src=&quot;/images/generative-art-11.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Matthew Burke</name><email>matthew.wesley.burke@gmail.com</email></author><category term="Generative Art" /><category term="javascript" /><category term="p5js" /><summary type="html">In-Browser Art with p5.js</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mwburke.github.io/images/placeholder.png" /><media:content medium="image" url="https://mwburke.github.io/images/placeholder.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>